hey look at these codes

//project controller.js
const Project = require('../models/Project');
const User = require('../models/User');
const Note = require('../models/Note');

// Get all projects for a user
const getProjects = async (req, res) => {
  try {
    const projects = await Project.find({ 'members.user': req.user.id })
      .populate('members.user', 'name')
      .populate('tasks');
    res.json(projects);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};

// Create a new project
const createProject = async (req, res) => {
  const { name, description, deadline, members } = req.body;
  try {
    const newProject = new Project({
      name,
      description,
      deadline,
      members,
    });

    const project = await newProject.save();

    // Add project to each member's profile
    const memberPromises = project.members.map(async (member) => {
      await User.findByIdAndUpdate(member.user, { $addToSet: { projects: project._id } });
    });
    await Promise.all(memberPromises);

    res.json(project);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};

// Add a member to a project
const addMember = async (req, res) => {
  const { projectId } = req.params;
  const { userId, role } = req.body;
  try {
    const project = await Project.findById(projectId);
    const user = await User.findById(userId);

    if (!project || !user) {
      return res.status(404).json({ msg: 'Project or User not found' });
    }

    project.members.push({ user: userId, role });
    await project.save();

    await User.findByIdAndUpdate(userId, { $addToSet: { projects: projectId } });

    res.json(project);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};

// Assign a task to a project
const assignTask = async (req, res) => {
  const { projectId } = req.params;
  const { taskId } = req.body;
  try {
    const project = await Project.findById(projectId);
    const task = await Note.findById(taskId);

    if (!project || !task) {
      return res.status(404).json({ msg: 'Project or Task not found' });
    }

    project.tasks.push(taskId);
    await project.save();

    res.json(project);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};

// Update an existing project
const updateExistingProject = async (req, res) => {
  const { name, description, deadline, members } = req.body;
  try {
    let project = await Project.findById(req.params.id);
    console.log('Project before update:', project); // Logging the project before update

    if (!project) return res.status(404).json({ msg: 'Project not found' });

    // Update the project fields
    const updatedProject = {
      name: name || project.name,
      description: description || project.description,
      deadline: deadline || project.deadline,
      members: members || project.members,
    };

    // Update the project in the database
    project = await Project.findByIdAndUpdate(req.params.id, { $set: updatedProject }, { new: true });

    // Log the updated project
    console.log('Project after update:', project);

    // Update members' profiles
    const oldMembers = project.members.map(member => member.user.toString());
    const newMembers = (members || project.members).map(member => member.user.toString());

    // Remove project from old members who are no longer part of the project
    const membersToRemove = oldMembers.filter(member => !newMembers.includes(member));
    const removePromises = membersToRemove.map(async (memberId) => {
      console.log('Removing project from member:', memberId);
      await User.findByIdAndUpdate(memberId, { $pull: { projects: project._id } });
    });

    // Add project to new members
    const membersToAdd = newMembers.filter(member => !oldMembers.includes(member));
    const addPromises = membersToAdd.map(async (memberId) => {
      console.log('Adding project to member:', memberId);
      await User.findByIdAndUpdate(memberId, { $addToSet: { projects: project._id } });
    });

    await Promise.all([...removePromises, ...addPromises]);

    res.json(project);
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};


// Delete a project
const deleteProject = async (req, res) => {
  try {
    const project = await Project.findById(req.params.id);

    if (!project) return res.status(404).json({ msg: 'Project not found' });

    // Remove project from all members' profiles
    const memberPromises = project.members.map(async (member) => {
      await User.findByIdAndUpdate(member.user, { $pull: { projects: project._id } });
    });
    await Promise.all(memberPromises);

    await Project.findByIdAndRemove(req.params.id);

    res.json({ msg: 'Project removed' });
  } catch (error) {
    console.error(error.message);
    res.status(500).send('Server Error');
  }
};

module.exports = {
  getProjects,
  createProject,
  addMember,
  assignTask,
  updateExistingProject,
  deleteProject,
};


projectcreation.jsx
import React, { useState, useEffect } from 'react';
import ProjectModal from '../../components/ProjectModal';
import ProjectList from '../../pages/home/ProjectList';
import { MdArrowDropDown } from "react-icons/md";
import { getAuthToken } from "../../utility/JWTtokenExport";

const ProjectsCreation = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [projects, setProjects] = useState([]);
    const [selectedProject, setSelectedProject] = useState(null);
    const token = getAuthToken();

    useEffect(() => {
        const fetchProjects = async () => {
            try {
                const response = await fetch('http://localhost:5000/api/projects', {
                    headers: {
                        'Content-Type': 'application/json',
                        'auth-token': token
                    }
                });
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const data = await response.json();
                setProjects(data);
            } catch (error) {
                console.error('Failed to fetch projects:', error);
            }
        };
        fetchProjects();
    }, []);

    const openModal = (project = null) => {
        setSelectedProject(project);
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
        setSelectedProject(null);
    };

    const saveProject = (savedProject) => {
        if (selectedProject) {
            setProjects(projects.map(project => project._id === savedProject._id ? savedProject : project));
        } else {
            setProjects([...projects, savedProject]);
        }
    };

    const deleteProject = async (projectId) => {
        try {
            const response = await fetch(`http://localhost:5000/api/projects/${projectId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'auth-token': token
                }
            });
            if (!response.ok) {
                throw new Error('Failed to delete project');
            }
            setProjects(projects.filter(project => project._id !== projectId));
        } catch (error) {
            console.error('Failed to delete project:', error);
        }
    };

    return (
        <>
            <div className="mt-6 flex">
                <p className="text-red-500 font-bold cursor-pointer flex-grow">My Projects</p>
                <div className='cursor-pointer flex-shrink mt-1'>
                    <MdArrowDropDown />
                </div>
            </div>
            <div>
                <button onClick={() => openModal()} className="cursor-pointer mt-5 bg-red-500 text-white p-2 rounded">Create New Project</button>
                <ProjectModal isOpen={isModalOpen} onClose={closeModal} onSave={saveProject} project={selectedProject} />
                <ProjectList projects={projects} onEdit={openModal} onDelete={deleteProject} />
            </div>
        </>
    );
}

export default ProjectsCreation;


project modal .jsx
import React, { useState, useEffect, useContext } from 'react';
import noteContext from '../context/notes/NotesContext';
import { getAuthToken } from "../utility/JWTtokenExport";

const ProjectModal = ({ isOpen, onClose, onSave, project }) => {
    const context = useContext(noteContext);
    const { getUsers } = context;
    const [projectData, setProjectData] = useState({
      // _id : '', added  
      name: '',
        description: '',
        deadline: '',
        members: [],
    });
    const token = getAuthToken();
    const [users, setUsers] = useState([]);
    const [selectedUser, setSelectedUser] = useState('');
    const [role, setRole] = useState('Team Member');

    useEffect(() => {
        const fetchUsers = async () => {
            try {
                const response = await fetch('http://localhost:5000/api/auth/getAllUsers', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        'auth-token': token
                    }
                });
                const data = await response.json();
                setUsers(data);
            } catch (error) {
                console.error('Failed to fetch users:', error);
            }
        };
        fetchUsers();
    }, []);

    useEffect(() => {
        if (project) {
          console.log('Project data:', project); 
            setProjectData(project);
        }
    }, [project]);

    const onChange = (e) => {
        setProjectData({ ...projectData, [e.target.name]: e.target.value });
    };

    const onAddMember = () => {
        const member = { user: selectedUser, role };
        setProjectData({ ...projectData, members: [...projectData.members, member] });
        setSelectedUser('');
        setRole('Team Member');
    };

    const onSubmit = async (e) => {
        e.preventDefault();
        try {
            const method = project ? 'PUT' : 'POST';
            const url = project ? `http://localhost:5000/api/projects/${project._id}` : 'http://localhost:5000/api/projects';
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    'auth-token': token
                },
                body: JSON.stringify(projectData),
            });
            if (!response.ok) {
                throw new Error('Failed to save project');
            }
            const data = await response.json();
            onSave(data);
            onClose();
        } catch (error) {
            console.error('Failed to save project:', error);
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
            <div className="bg-white w-full max-w-lg p-6 rounded-lg shadow-lg">
                <h2 className="text-2xl mb-4 text-red-500">{project ? 'Edit Project' : 'Create New Project'}</h2>
                <form onSubmit={onSubmit}>
                    <div className="mb-4">
                        <label className="block text-red-500">Project Name</label>
                        <input type="text" name="name" value={projectData.name} onChange={onChange} className="w-full p-2 border border-red-500 rounded" />
                    </div>
                    <div className="mb-4">
                        <label className="block text-red-500">Description</label>
                        <input type="text" name="description" value={projectData.description} onChange={onChange} className="w-full p-2 border border-red-500 rounded" />
                    </div>
                    <div className="mb-4">
                        <label className="block text-red-500">Deadline</label>
                        <input type="date" name="deadline" value={projectData.deadline} onChange={onChange} className="w-full p-2 border border-red-500 rounded" />
                    </div>
                    <div className="mb-4">
                        <label className="block text-red-500">Add Member</label>
                        <select value={selectedUser} onChange={(e) => setSelectedUser(e.target.value)} className="w-full p-2 border border-red-500 rounded">
                            <option value="">Select User</option>
                            {users.map((user) => (
                                <option key={user._id} value={user._id}>{user.name}</option>
                            ))}
                        </select>
                        <select value={role} onChange={(e) => setRole(e.target.value)} className="w-full p-2 border border-red-500 rounded mt-2">
                            <option value="Project Manager">Project Manager</option>
                            <option value="Team Member">Team Member</option>
                        </select>
                        <button type="button" onClick={onAddMember} className="mt-2 bg-red-500 text-white p-2 rounded">Add Member</button>
                    </div>
                    <div className="flex justify-end">
                        <button type="button" onClick={onClose} className="bg-gray-300 text-black p-2 rounded mr-2">Cancel</button>
                        <button type="submit" className="bg-red-500 text-white p-2 rounded">{project ? 'Save Changes' : 'Create Project'}</button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default ProjectModal;


project list.jsx
import React, { useState } from 'react';

const ProjectList = ({ projects, onEdit, onDelete }) => {
    const [expandedProjectId, setExpandedProjectId] = useState(null);

    const toggleExpand = (projectId) => {
        if (expandedProjectId === projectId) {
            setExpandedProjectId(null);
        } else {
            setExpandedProjectId(projectId);
        }
    };

    return (
        <div className="mt-4">
            {projects.length === 0 ? (
                <p>No projects available</p>
            ) : (
                projects.map((project) => (
                    <div key={project._id} className="p-4 border mb-4 rounded">
                        <div className="flex justify-between items-center">
                            <h3 className="text-xl font-bold cursor-pointer" onClick={() => toggleExpand(project._id)}>{project.name}</h3>
                            <div className="flex space-x-2">
                                <button onClick={() => onEdit(project)} className="bg-yellow-500 text-white p-1 rounded">Edit</button>
                                <button onClick={() => onDelete(project._id)} className="bg-red-500 text-white p-1 rounded">Delete</button>
                            </div>
                        </div>
                        {expandedProjectId === project._id && (
                            <div>
                                <p>{project.description}</p>
                                <p>Deadline: {new Date(project.deadline).toLocaleDateString()}</p>
                                <div>
                                    <h4>Members:</h4>
                                    <ul>
                                        {project.members.map((member) => (
                                            <li key={`${member.user._id}-${member.role}`}>{member.user.name} ({member.role})</li>
                                        ))}
                                    </ul>
                                </div>
                                <div>
                                    <h4>Tasks:</h4>
                                    <ul>
                                        {project.tasks.map((task) => (
                                            <li key={task._id}>{task.title}</li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        )}
                    </div>
                ))
            )}
        </div>
    );
};

export default ProjectList;


as u can see we have to pass props again n again. can u isntead make a ProjectsState.jsx having the necessary content into context api , and then rewrite all these files using context api implementation. basically my current api are having trouble passing the ids
